""" FootballClasses.py

Originally intent was to use classes for each DB entity, however application evolved to less usage as in many
cases the extract of collections (in lists of dicts) were sufficient. Usage of these classes is mainly with
form use as the class attribute names match on the form input fields in most cases.

As CFFA has evolved (as my knowledge), I've used LedgerEntry class in the player web page - this means the jinja
template uses the class attributes instead of dicts - this makes the template clearer as .get(key) is no longer used. It
should also be more robust in case a key is missing in data ontained from the DB.

"""


class Player:
    """ Player class.

    Attributes
    ----------

    dbid : Str
        DBID will be generated by MongoDB when documents are inserted into the DB "_id"- there is no explict ID
        generation in CFFA.

    playername : Str
        Unique name for the player, typically first name and first letter of surname which is titled.

    playedlastgame : Bool
        True if this player played the last game. Used to help prepopulate new game forms to reduce click activity

    pitchbooker : Bool
        True if this player booked the pitch. Only one player can book a pitch, but a player does not need to actually
        play the game if they do book.

    guests : Int
        Always defaults to 0, counts the number of unregistered players this player brings along on a one-off basis.
        The player picks up the portion of the game cost for the guests.

    """
    dbid = "No DB ID"
    playername = "No Player set"
    playedlastgame = False
    pitchbooker = False
    guests = 0

    def __init__(self, dbid, name, played_last_game, pitch_booker, guests):
        """ player constructor.

        Parameters
        ----------

        dbid : Str
            DBID will be generated by MongoDB when documents are inserted into the DB "_id"- there is no explict ID
            generation in CFFA.

        name : Str
            Unique name for the player, typically first name and first letter of surname which is titled.

        played_last_game : Bool
            True if this player played the last game. Used to help prepopulate new game forms to reduce click activity

        pitch_booker : Bool
            True if this player booked the pitch. Only one player can book a pitch, but a player does not need to
            actually play the game if they do book.

        guests : Int
            Always defaults to 0, counts the number of unregistered players this player brings along on a one-off basis.
            The player picks up the portion of the game cost for the guests.

        """
        self.dbid = dbid
        self.playername = name
        self.playedlastgame = played_last_game
        self.pitchbooker = pitch_booker
        self.guests = guests

    def __repr__(self):
        """ Player display logic, used for debugging.
        """
        return ('player(' + str(self.dbid) + ', ' +
                self.playername + ', ' +
                str(self.playedlastgame) + ', ' +
                str(self.pitchbooker) + ', ' +
                str(self.guests))


class Game:
    """ Game class.

    Attributes
    ----------

    gamecost : decimal128
        Cost of game. Uses decimal128 so that MongoDB can accurate store the data as float would introduce a small
        error.
        As Decimal128 is a binary string type, this means to_decimal() is used so that the figure can be part of maths
        calculations.

    gamedate : datetime.datetime
        Date (in datetime, so ignore hours, mins, secs) of the game that was played.

    playerlist : 'str' : 'list"
        List of playerName strings with who played the game.

    booker : str
        playerName of the person who booked the pitch.

    guests : Int
        Always defaults to 0, counts the number of unregistered players this game hosted. Used when calculating the
        individual game cost per person played.
    """
    gamecost = float(0.00)  # TO DO: should be decimal128
    gamedate = ""
    playerlist = []
    currentactiveplayers = 0
    booker = ""
    guests = 0

    def __init__(self, game_cost, game_date, player_list, booker):
        """ constructor of a game object.

        Parameters
        ----------

        game_cost : decimal128
            Cost of game. Uses decimal128 so that MongoDB can accurate store the data as float would introduce a small
            error.
            As Decimal128 is a binary string type, this means to_decimal() is used so that the figure can be part of
            maths calculations.

        game_date : datetime.datetime
            Date (in datetime, so ignore hours, mins, secs) of the game that was played.

        player_list : 'str' : 'list"
            List of playerName strings with who played the game.

        booker : str
            playerName of the person who booked the pitch.

        """
        self.gamecost = game_cost
        self.gamedate = game_date
        self.playerlist = player_list
        self.booker = booker
        self.currentactiveplayers = len(player_list)   # this is incorrect

    def __repr__(self):
        """ Game display logic, used for debugging.
        """
        return ('game(' + str(self.gamecost.to_decimal()) + ', ' +
                str(self.gamedate) + ', ' +
                str(self.currentactiveplayers) + ', ' +
                repr(self.playerlist) + ')')


class TeamPlayer:
    """ Team Player class.

    Attributes
    ----------

    playername : str
        Cost of game. Uses decimal128 so that MongoDB can accurate store the data as float would introduce a small
        error.
        As Decimal128 is a binary string type, this means to_decimal() is used so that the figure can be part of maths
        calculations.

    retiree : Boolean
        Date (in datetime, so ignore hours, mins, secs) of the game that was played.

    comment : 'str'
        A comment about the player defined when creating/editing the user. Unused but populated.

    """
    playername = ""
    retiree = False
    comment = ""

    def __init__(self, player_name, retired, comment):
        """ Team Player constructor.

        Parameters
        ----------

        player_name : str
            Cost of game. Uses decimal128 so that MongoDB can accurate store the data as float would introduce a small
            error. As Decimal128 is a binary string type, this means to_decimal() is used so that the figure can be
            part of maths calculations.

        retired : Boolean
            Date (in datetime, so ignore hours, mins, secs) of the game that was played.

        comment : 'str'
            A comment about the player defined when creating/editing the user. Unused but populated.

        """
        self.playername = player_name
        self.retiree = retired
        self.comment = comment

    def __repr__(self):
        """ TeamPlayer display logic, used for debugging.
        """
        return 'TeamPlayer(' + self.playername + ', ' + self.retiree + ', ' + self.comment + ')'


class Team:
    """ Team class.

    Attributes
    ----------

    teamName : str
        teamName of tenancy. Note this is stored in both settings and tenancy documents..

    playerList : `str` : `list`
        list of player names available in this team..


    """
    teamname = ""
    playerlist = []

    def __init__(self, player_list):
        """ Team constructor function.

        Attributes
        ----------

        player_list : `str` : `list`
            list of player names available in this team.

        TO DO: find out why isn't the teamName initialised?


        """
        self.playerlist = player_list

    def __repr__(self):
        """ Team display logic, used for debugging.
        """
        return 'Team(' + self.teamname + "," + repr(self.playerlist) + ')'


class Transaction:
    """ Transaction class.

    Attributes
    ----------

    player : str
        Name of player

    description : str
        Freeform string describing the transaction. Note that each debit per game to each player is not captured in
        the transaction collection, so a transaction only covers player payments to the manager and other trnasactions
        such as a booking credit.

    amount : decimal128
        The value of the transaction.

    transactiondate : datetime.datetime
        The date of the transactions. As datetime is used, ignore hour/minute/seconds. Datetime must be used as Date
        is not supported by MongoDB/pymongo.

    """
    player = ""
    description = ""
    amount = 0.00   # we should be float.
    transactiondate = ""

    def __init__(self, player, description, amount, transaction_date):
        """ Transaction constructor.

        Parameters
        ----------

        player : str
            Name of player

        description : str
            Freeform string describing the transaction. Note that each debit per game to each player is not captured in
            the transaction collection, so a transaction only covers player payments to the manager and other
            transactions such as a booking credit.

        amount : decinal128
            The value of the transaction.

        transaction_date : datetime.datetime
            The date of the transactions. As datetime is used, ignore hour/minute/seconds. Datetime must be used as Date
            is not supported by MongoDB/pymongo.

        """
        self.player = player
        self.description = description
        self.amount = amount
        self.transactiondate = transaction_date

    def __repr__(self):
        """ Transaction display logic, used for debugging.
        """
        return ('transaction(' + self.player + ', ' +
                str(self.transactiondate) + ', ' +
                self.description + ', ' +
                str(self.amount.to_decimal()) + ')')


class CFFASettings:
    """ CFFASettings class.

    Only one setting is currently implemented.

    Attributes
    ----------

    teamname : str
         Name for the manager's team.

    """
    teamname = None

    def __init__(self, team_name):
        """ CFFASettings constructor.

        Parameters
        ----------

        team_name : str
             Name for the manager's team.

        """
        self.teamname = team_name

    def __repr__(self):
        """ CFFASettings display logic, used for debugging.
        """
        return 'CFFASetting(' + self.teamname + ')'


class CFFAUser:
    """ CFFAUser class.

    A user relates to user access to the webserver. If a user is a player their name should match. authID is allocated
    by Auth0 when a user is added.

    Attributes
    ----------

    name : str
         Name for the CFFA user. Should match their player name if applicable.

    authid : str
        Auth0 unique ID allocated by Auth0. Will always start with auth0|

    role : str
        Either manager or player. A manager has full access, where a player can only see their summary. TO DO: admin
        user.

    revoked : boolean
        If revoked is set, the user should not be able to log in. TO DO: test!
    """
    name = None
    authid = None
    role = None
    revoked = None

    def __init__(self, name, auth_id, role, revoked):
        """ CFFAUser constructor.

        Attributes
        ----------

        name : str
             Name for the CFFA user. Should match their player name if applicable.

        authID : str
            Auth0 unique ID allocated by Auth0. Will always start with auth0|

        role : str
            Either manager or player. A manager has full access, where a player can only see their summary. TO DO: admin
            user.

        revoked : boolean
            If revoked is set, the user should not be able to log in. TO DO: test!
        """
        self.name = name
        self.authid = auth_id
        self.role = role
        self.revoked = revoked

    def __repr__(self):
        """ CFFAUser display logic, used for debugging.
        """
        return 'CFFAUser(' + self.name + ", " + self.authid + ", " + self.role + ", " + str(self.revoked) + ')'


class PlayerSummary:
    """ PlayerSummary class.

    This class is used for the player web page only to provide a summary of key data.

    Attributes
    ----------

    amount : decimal128
         Current balance for the user.

    gamescost : decimal128
        total cost of all the games played by the user|

    moniespaid  : decimal128
        total payments made by the user (ie: sum of transactions in the DB)

    gameattended : int
        The number of games this user has played!

    lastplayed : datetime.datetime
        The date of last game this player played. Ignore hours, minutes, seconds in this datetime.
    """
    amount = 0
    gamescost = 0
    moniespaid = 0
    gameattended = 0
    lastplayed = None

    def __init__(self, amount, games_cost, monies_paid, game_attended, last_played):
        """ PlayerSummary constructor.

        This class is used for the player web page only to provide a summary of key data.

        Parameters
        ----------

        amount : decimal128
             Current balance for the user.

        games_cost : decimal128
            total cost of all the games played by the user|

        monies_paid  : decimal128
            total payments made by the user (ie: sum of transactions in the DB)

        game_attended : int
            The number of games this user has played!

        last_played : datetime.datetime
            The date of last game this player played. Ignore hours, minutes, seconds in this datetime.
        """
        self.amount = amount
        self.gamescost = games_cost
        self.moniespaid = monies_paid
        self.gameattended = game_attended
        self.lastplayed = last_played


class LedgerEntry:
    """ LedgerEntry class.

    This class is used for the player web page in a bank account summary format showing both game costs and
    transactions interleaved in date order..

    Attributes
    ----------

    date : datetime.datetime
         Date of entry, each game or transaction date.

    credit : string
        Populated with the credit amount, typically a payment from the player to the manager. Not decimal128 so to
        facilitate a blank record where it is not applicable.

    debit : string
        A debit amount, typically a game played. Not decimal128 so to
        facilitate a blank record where it is not applicable.

    balance : Decimal128
        The rolling balance after the credit or debit amount.

    description : str
        What the transaction was, either from the transaction collection, or a game played..
    """
    date = None   # use Date type
    credit = ""   # use String so blanks are possible
    debit = ""   # use String so blanks are possible
    balance = ""   # also use String
    description = ""

    def __init__(self, date, credit, debit, balance, description):
        """ LedgerEntry constructor.

        This class is used for the player web page in a bank account summary format showing both game costs and
        transactions interleaved in date order..

        Parameters
        ----------

        date : datetime.datetime
             Date of entry, each game or transaction date.

        credit : string
            Populated with the credit amount, typically a payment from the player to the manager. Not decimal128 so to
            facilitate a blank record where it is not applicable.

        debit : string
            A debit amount, typically a game played. Not decimal128 so to
            facilitate a blank record where it is not applicable.

        balance : Decimal128
            The rolling balance after the credit or debit amount.

        description : str
            What the transaction was, either from the transaction collection, or a game played..
        """
        self.date = date
        self.credit = credit
        self.debit = debit
        self.balance = balance
        self.description = description


